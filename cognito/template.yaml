AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API Gateway + Cognito User Pools Auth

Parameters:
  CognitoUserPoolName:
    Type: String
    Default: OctankUserPool

  CognitoUserPoolClientName:
    Type: String
    Default: OctankUserPoolApiGatewayClient

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  ApiBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        const AWS = require('aws-sdk');
        const dynamoDb = new AWS.DynamoDB.DocumentClient();
        exports.handler = async (event, context, callback) => {
          console.log(`Received event ${JSON.stringify(event)}`);
          const params = {
            TableName: process.env.DYNAMODB_TABLE,
            Key: {
              customerId: event.pathParameters.id,
            },
          };
          return dynamoDb.get(params).promise()
          .then(val => {
            console.log(`Received customer from Dynamo Db - ${JSON.stringify(val)}`);
            if (Object.keys(val).length > 0) {
              const resp = {
                statusCode: 200,
                body: JSON.stringify(val),
              };
              return Promise.resolve(resp);
            } else {
              console.log(`No customer with id - ${event.pathParameters.id}`);
              return Promise.resolve({
                statusCode: 404
              });
            }
          })
          .catch(err => {
            console.error(`Error while fetching customer from Dynamo Db - ${JSON.stringify(err)}`);
            return Promise.reject({
              statusCode: err.statusCode || 501
            });
          });
        }
      Handler: index.handler
      FunctionName: octank-customer-api
      Description: Lambda invoked when fetching a customer
      MemorySize: 512
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:GetRecords
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource: "arn:aws:dynamodb:us-east-1:197234178237:table/octank-customer-table"
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          DYNAMODB_TABLE: octank-customer-table
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /
            Method: GET
            # NOTE: This endpoint is publicly accessible
            Auth:
              Authorizer: NONE
        ProxyAny:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /{proxy+}
            Method: ANY
            # NOTE: This endpoint is publicly accessible
            Auth:
              Authorizer: NONE
        GetCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /customers/{id}
            Method: GET
            # NOTE: This endpoint is publicly accessible
            Auth:
              Authorizer: NONE

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      FunctionName: octank-cognito-pre-signup
      Description: Lambda invoked before a user signs up
      Events:
        CognitoUserPoolPreSignup:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger: PreSignUp

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient
