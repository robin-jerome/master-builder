AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31

Description: "Octank demo - Presenting recommendation to user. This stack creates an API Gateway backed by a lambda function, SPA frontend application hosted in S3 backed by CloudFront, AWS Cognito User Pool, Identity Pools and Demo User"

Parameters:
  CognitoUserPoolName:
    Type: String
    Default: OctankUserPool
  CognitoIdPoolName:
    Type: String
    Default: OctankIdentityPool
  CognitoUserPoolClientName:
    Type: String
    Default: OctankUserPoolApiGatewayClient
  UserEmail:
    Description: Creates a user to be used for authentication. It needs to be an email address
    Type: String
    AllowedPattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
    Default: robinjer@amazon.com

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Cors:
        AllowMethods: "'OPTIONS, GET'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
  #      AllowCredentials: True
  #      Auth:
  #        Authorizers:
  #          MyCognitoAuthorizer:
  #            UserPoolArn: !GetAtt CognitoUserPool.Arn

  ApiBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        const AWS = require('aws-sdk');
        const dynamoDb = new AWS.DynamoDB.DocumentClient();
        exports.handler = async (event, context, callback) => {
          console.log(`Received event ${JSON.stringify(event)}`);
          const params = {
            TableName: process.env.DYNAMODB_TABLE,
            Key: {
              customerId: event.pathParameters.id,
            },
          };
          return dynamoDb.get(params).promise()
          .then(val => {
            console.log(`Received customer from Dynamo Db - ${JSON.stringify(val)}`);
            if (Object.keys(val).length > 0) {
              const resp = {
                statusCode: 200,
                body: JSON.stringify(val),
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                }
              };
              return Promise.resolve(resp);
            } else {
              console.log(`No customer with id - ${event.pathParameters.id}`);
              return Promise.resolve({
                statusCode: 404,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                }
              });
            }
          })
          .catch(err => {
            console.error(`Error while fetching customer from Dynamo Db - ${JSON.stringify(err)}`);
            return Promise.reject({
              statusCode: err.statusCode || 501,
              headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                }
            });
          });
        }
      Handler: index.handler
      FunctionName: octank-customer-api
      Description: Lambda invoked when fetching a customer
      MemorySize: 512
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:GetRecords
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource: "arn:aws:dynamodb:us-east-1:197234178237:table/octank-customer-table"
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          DYNAMODB_TABLE: octank-customer-table
      Events:
        GetCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /customers/{id}
            Method: ANY
            # NOTE: This endpoint is publicly accessible
            #Auth:
            #  Authorizer: NONE

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: "Your username is {username} and the temporary password is {####}"
          EmailSubject: "Your temporary password"
          SMSMessage: "Your username is {username} and the temporary password is {####}"
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
      RefreshTokenValidity: 30

  CognitoUserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref UserEmail
      UserPoolId: !Ref CognitoUserPool
      DesiredDeliveryMediums:
        - EMAIL
      UserAttributes:
        - Name: email
          Value: !Ref UserEmail
        - Name: email_verified
          Value: "true"

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref CognitoIdPoolName
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt ApiGatewayInvokeRole.Arn
        unauthenticated: !GetAtt ApiGatewayInvokeRole.Arn

  ApiGatewayInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3
      FunctionName: octank-cognito-pre-signup
      Description: Lambda invoked before a user signs up
      Events:
        CognitoUserPoolPreSignup:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger: PreSignUp

  WebUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: octank-web-ui
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET]
            AllowedOrigins: ["*"]
            Id: OctankUICorsRule
            MaxAge: 3600

  WebUIBucketReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebUIBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${WebUIBucket}/*
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref WebUIBucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebUIBucket.RegionalDomainName
            Id: OctankUI-S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        HttpVersion: http2
        Comment: The Distribution for the Octank customer facing app
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: OctankUI-S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient

  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool Client Id"
    Value: !Ref CognitoIdentityPool

  CloudFrontDistributionId:
    Description: "CloudFront distributionId"
    Value: !Ref CloudFrontDistribution

  WebUIBucket:
    Description: "Web UI bucket"
    Value: !Ref WebUIBucket

  ApiGateway:
    Description: "Api Gateway"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Dev/"
