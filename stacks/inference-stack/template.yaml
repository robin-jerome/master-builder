AWSTemplateFormatVersion: "2010-09-09"

Description: "Octank demo - Triggering recommendation inference. This stack creates a Dynamo DB, its correspnding stream and a lambda function that listens to this stream and calls a sagemaker inference endpoint. Further it writes the inferences back to the Dynamo DB"

Parameters:
  SageMakerEndpointName:
    Type: String
    Default: octank-marketing-inference
  DynamoDbTable:
    Type: String
    Default: octank-customer-table

Resources:
  InferenceTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require('aws-sdk');

          const sagemakerruntime = new AWS.SageMakerRuntime({ apiVersion: '2017-05-13', region: 'us-east-2' });

          const dynamoDb = new AWS.DynamoDB.DocumentClient();

          const sageMakerEp = process.env.SAGEMAKER_ENDPOINT;

          const dynamoTable = process.env.DYNAMODB_TABLE;

          const PRODUCT_ID = 'Fixed Deposit';

          exports.handler = async (event, context, callback) => {
            console.log(`Received event in SageMaker trigger lambda ${JSON.stringify(event)}`);
            const recordsForInference = event.Records
              .filter(r => {
                if (r.eventName === 'REMOVE') return false;
                if (r.dynamodb && r.dynamodb.NewImage) { // Records with entities and no recommendations
                  return r.dynamodb.NewImage.recommendations.L.length === 0 /* && r.dynamodb.NewImage.entities.L.length > 0 */ //TODO: Remove after entities are populated
                }
                return false;
              });
            const inferencePromises = recordsForInference.map(r => {
              const inferenceParams = getInferenceParams(r);
              return sagemakerruntime.invokeEndpoint({
                EndpointName: sageMakerEp,
                ContentType: 'text/csv',
                Accept: 'text/csv',
                Body: inferenceParams
              }).promise();
            });
            return Promise.all(inferencePromises)
              .then(respArray => {
                const recommOut = respArray.map(resp => {
                  const body = resp.Body.toString();
                  if (body.includes('yes')) { // Add to recommendations
                    console.log(`SageMaker thinks that the product can be recommended to the customer`);
                    return true;
                  } else if (body.includes('no')) { // Do not add to recommendations
                    console.log(`SageMaker thinks that the product should not be recommended to the customer`);
                    return false;
                  }
                });
                const storePromises = [];
                recordsForInference.forEach((r, index) => {
                  const isRecommended = recommOut[index];
                  const customerId = r.dynamodb.Keys.customerId.S;
                  // Todo Fetch customer id from 'r'
                  storePromises.push(storeInferenceOutputForCustomer(customerId, PRODUCT_ID, isRecommended));
                });
                return Promise.all(storePromises);
              })
              .catch(err => {
                console.error(`Errow while triggering inference from SageMaker endpoint - ${JSON.stringify(err)}`);
                return Promise.reject(err);
              })
          };

          const storeInferenceOutputForCustomer = (customerId, productId, isRecommended) => {
            const timestamp = new Date().getTime();
            console.log(`Storing product recommendation as '${isRecommended}' for product '${productId}' and customer '${customerId}'`);
            return dynamoDb.update({
              TableName: dynamoTable,
              Key: {
                'customerId': customerId
              },
              UpdateExpression: "set recommendations = list_append(recommendations, :r), updatedAt = :t",
              ExpressionAttributeValues: {
                ":r": [{ "productId": productId, "isRecommended": isRecommended }],
                ":t": timestamp
              },
              ReturnValues: 'UPDATED_NEW'
            }).promise();
          }

          const getInferenceParams = (record) => {
            // TODO: Fetch from comprehension & DB
            // return '31,technician,single,secondary,no,102,yes,no,telephone,17,apr,460,2,345,2,failure'
            return '46,management,divorced,tertiary,no,624,no,no,cellular,17,sep,336,2,183,2,success'
          };
      Handler: index.handler
      FunctionName: octank-dynamo-inference-trigger
      Description: Lambda invoked on changes in DynamoDB table
      Role:
        Fn::GetAtt: [InferenceTriggerLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDbTable
          SAGEMAKER_ENDPOINT: !Ref SageMakerEndpointName
  InferenceTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: InferenceTriggerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:UpdateItem
                Resource: "*"
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                Resource: "*"
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: octank-customer-table
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  DynamoDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [DynamoDBTable, StreamArn]
      FunctionName:
        Fn::GetAtt: [InferenceTriggerFunction, Arn]
      StartingPosition: LATEST
