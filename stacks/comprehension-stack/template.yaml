AWSTemplateFormatVersion: "2010-09-09"

Description: "Octank demo - Transcribe audio file triggered from S3 bucket using step functions, pass data to Amazon Comprehend and store to DynamoDB"

Parameters:
  StepFnTriggerLambdaName:
    Type: String
    Default: octank-step-fn-trigger
  StartTranscriptionLambdaName:
    Type: String
    Default: octank-transcribe-trigger
  CheckTranscriptionStatusLambdaName:
    Type: String
    Default: octank-check-transcribe-status
  GetTranscriptionOutputLambdaName:
    Type: String
    Default: octank-get-transcribe-output
  ComprehendTriggerAndStoreLambdaName:
    Type: String
    Default: octank-comprehend-trigger-and-store
  DynamoDBTableName:
    Type: String
    Default: octank-customer-table
  StepFunctionName:
    Type: String
    Default: octank-transcribe-comprehend-store
  AudioFileS3Bucket:
    Type: String
    Default: connect-8f2ee5b86dec
  CustomResourceLambdaFunctionName:
    Type: String
    Default: octank-custom-resource-lambda
Resources:
  StepFunctionTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';

          const aws = require('aws-sdk');
          var stepfunctions = new aws.StepFunctions();
          const s3 = new aws.S3({ apiVersion: '2006-03-01' });

          exports.handler = (event, context, callback) => {
            const bucket = event.Records[0].s3.bucket.name;
            const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
            const params = { Bucket: bucket, Key: key };
            if (!key.endsWith(".wav")) {
              console.log('S3 upload trigger corresponds to an object that is not an audio file. No transcribe will be triggered');
              callback(null, {});
            } else {
                s3.getObject(params, (err, data) => {
                if (err) {
                  console.log(err);
                  const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;
                  console.log(message);
                  callback(message);
                } else {
                  var job_name = key.replace("/", "-");
                  var stepparams = {
                    "stateMachineArn": process.env.STEP_FUNCTIONS_ARN,
                    "input": "{\"s3URL\": \"https://s3.amazonaws.com/" + bucket + "/" + key + "\",\"JOB_NAME\": \"" + job_name + "\"}"
                  };
                  stepfunctions.startExecution(stepparams, function(err, data) {
                    if (err) console.log(err, err.stack); // an error occurred
                    else console.log(data); // successful response
                  });
                  callback(null, data.ContentType);
                }
              });
            }
          };
      Handler: index.handler
      FunctionName: !Ref StepFnTriggerLambdaName
      Description: Lambda invoked on changes in DynamoDB table
      Role:
        Fn::GetAtt: [StepFunctionTriggerLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          STEP_FUNCTIONS_ARN: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StepFunctionName}
  StepFunctionTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StepFunctionTriggerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                Resource: !Sub arn:aws:s3:::${AudioFileS3Bucket}/*
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StepFunctionName}
  StartTranscriptionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';

          const AWS = require('aws-sdk');
          const transcribeservice = new AWS.TranscribeService();
          exports.handler = (event, context, callback) => {
            var parts = event.JOB_NAME.split("/");
            var params = {
              LanguageCode: 'en-US',
              Media: { /* required */
                MediaFileUri: event.s3URL + ""
              },
              MediaFormat: 'wav',
              TranscriptionJobName: parts[parts.length - 1]
            };
            transcribeservice.startTranscriptionJob(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     {
              console.log(data);           // successful response
              event.wait_time = 10;
              event.JOB_NAME = data.TranscriptionJob.TranscriptionJobName;
              callback(null, event);
              }
            });
          };
      Handler: index.handler
      FunctionName: !Ref StartTranscriptionLambdaName
      Description: Trigger transcription job for call recordings
      Role:
        Fn::GetAtt: [StartTranscriptionLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
  StartTranscriptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StartTranscriptionLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - transcribe:StartStreamTranscription
                  - transcribe:StartTranscriptionJob
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                Resource: !Sub arn:aws:s3:::${AudioFileS3Bucket}/*
  CheckTranscriptionStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';
          var AWS = require('aws-sdk');
          var transcribeservice = new AWS.TranscribeService();

          exports.handler = (event, context, callback) => {
              var params = {
                TranscriptionJobName: event.JOB_NAME /* required */
              };
              transcribeservice.getTranscriptionJob(params, function(err, data) {
                if (err) console.log(err, err.stack); // an error occurred
                else     console.log(data);           // successful response
                event.STATUS = data.TranscriptionJob.TranscriptionJobStatus;
                event.Transcript =data.TranscriptionJob.Transcript;
                callback(null,event);
              });
          };
      Handler: index.handler
      FunctionName: !Ref CheckTranscriptionStatusLambdaName
      Description: Check status of transcription job
      Role:
        Fn::GetAtt: [CheckTranscriptionStatusLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
  CheckTranscriptionStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CheckTranscriptionStatusLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - transcribe:GetTranscriptionJob
                  - transcribe:ListTranscriptionJobs
                Resource: "*"
  GetTranscriptionOutputLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';
          var AWS = require('aws-sdk');
          var transcribeservice = new AWS.TranscribeService();

          exports.handler = (event, context, callback) => {

              var params = {
                TranscriptionJobName: event.JOB_NAME /* required */
              };
              transcribeservice.getTranscriptionJob(params, function(err, data) {
                if (err) console.log(err, err.stack); // an error occurred
                else     console.log(data);           // successful response
                event.STATUS = data.TranscriptionJob.TranscriptionJobStatus;
                event.TranscriptFileUri =data.TranscriptionJob.Transcript.TranscriptFileUri;
                callback(null,event);
              });
          };
      Handler: index.handler
      FunctionName: !Ref GetTranscriptionOutputLambdaName
      Description: Get transcription output
      Role:
        Fn::GetAtt: [GetTranscriptionOutputLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
  GetTranscriptionOutputLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GetTranscriptionOutputLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - transcribe:GetTranscriptionJob
                Resource: "*"
  ComprehendTriggerAndStoreLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';
          const https = require('https');
          const AWS = require('aws-sdk');
          const comprehend = new AWS.Comprehend({ apiVersion: '2017-11-27' });
          const dynamoDb = new AWS.DynamoDB.DocumentClient();

          exports.handler = (event, context, callback) => {
            var requestUrl = event.TranscriptFileUri;
            console.log(`Transcript file will be fetched from ${requestUrl}`);
            console.log(`Received event in lambda ${JSON.stringify(event)}`);
            https.get(requestUrl, (res) => {
              var chunks = [];
              res.on("data", function(chunk) {
                chunks.push(chunk);
              });
              res.on("end", function() {
                var body = Buffer.concat(chunks);
                var results = JSON.parse(body);
                var transcript = results.results.transcripts[0].transcript;
                console.log(`Transcribed text "${transcript}"`);
                var params = {
                  LanguageCode: "en",
                  Text: transcript + ""
                };
                Promise.all([
                    comprehend.detectEntities(params).promise(),
                    comprehend.detectSentiment(params).promise()
                  ]).then(([entities, sentiments]) => {
                    console.log(`Detected entities: ${JSON.stringify(entities)}`);
                    console.log(`Detected sentiments: ${JSON.stringify(sentiments)}`);
                    return storeToDynamoDB('robinjer@amazon.com', entities, sentiments);
                  })
                  .then(() => {
                    callback(null, {});
                  })
                  .catch(err => {
                    console.log(err, err.stack);
                  });
              });

            }).on('error', (e) => {
              console.error(e);
            });
          };

          const storeToDynamoDB = (customerId, entities, sentiments) => {
            const timestamp = new Date().getTime();
            const params = {
              TableName: process.env.DYNAMODB_TABLE,
              Item: {
                customerId: customerId,
                entities: entities,
                sentiments: sentiments,
                recommendations: [],
                createdAt: timestamp,
                updatedAt: timestamp,
              }
            }
            return dynamoDb.put(params).promise()
              .then(data => {
                console.log(`Stored entities and sentiments in DynamoDB for customer: ${customerId}`);
                return Promise.resolve(data);
              })
              .catch(err => {
                console.error(`Failed to store entities and sentiments in DynamoDB for customer: ${customerId}, error : ${JSON.stringify(err)}`);
                return Promise.reject(err);
              })
          };
      Handler: index.handler
      FunctionName: !Ref ComprehendTriggerAndStoreLambdaName
      Description: Start comprehend job when transcription is complete and store to Dynamo DB
      Role:
        Fn::GetAtt: [ComprehendTriggerAndStoreLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
  ComprehendTriggerAndStoreLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ComprehendTriggerAndStoreLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - comprehend:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Ref StepFunctionName
      DefinitionString: !Sub |
        {
          "Comment": "A state machine that submits a Job to AWS Batch and monitors the Job until it completes.",
          "StartAt": "Transcribe Call Audio",
          "States": {
            "Transcribe Call Audio": {
              "Type": "Task",
              "Resource": "${StartTranscriptionLambda.Arn}",
              "ResultPath": "$",
              "Next": "Wait X Seconds",
              "Retry": [{
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }]
            },
            "Wait X Seconds": {
              "Type": "Wait",
              "SecondsPath": "$.wait_time",
              "Next": "Get Transcribe Job Status"
            },
            "Get Transcribe Job Status": {
              "Type": "Task",
              "Resource": "${CheckTranscriptionStatusLambda.Arn}",
              "Next": "Job Complete?",
              "InputPath": "$",
              "ResultPath": "$",
              "Retry": [{
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }]
            },
            "Job Complete?": {
              "Type": "Choice",
              "Choices": [{
                "Variable": "$.STATUS",
                "StringEquals": "IN_PROGRESS",
                "Next": "Wait X Seconds"
              }, {
                "Variable": "$.STATUS",
                "StringEquals": "COMPLETED",
                "Next": "Get Transcribe Job Output"
              }, {
                "Variable": "$.STATUS",
                "StringEquals": "FAILED",
                "Next": "Job Failed"
              }],
              "Default": "Wait X Seconds"
            },
            "Job Failed": {
              "Type": "Fail",
              "Cause": "AWS Batch Job Failed",
              "Error": "DescribeJob returned FAILED"
            },
            "Get Transcribe Job Output": {
              "Type": "Task",
              "Resource": "${GetTranscriptionOutputLambda.Arn}",
              "InputPath": "$",
              "Next": "Send contextual analysis",
              "Retry": [{
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }]
            },
            "Send contextual analysis": {
              "Type": "Task",
              "Resource": "${ComprehendTriggerAndStoreLambda.Arn}",
              "InputPath": "$",
              "End": true,
              "Retry": [{
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }]
            }
          }
        }
      RoleArn: !GetAtt "StateMachineRole.Arn"
  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "states.${AWS::Region}.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource:
                  - "*"
  StepFuncionTriggerLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt StepFunctionTriggerLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${AudioFileS3Bucket}"
  StepFuncionTriggerLambdaInvokeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketNotification"
                  - "s3:PutBucketNotification"
                Resource: !Sub "arn:aws:s3:::${AudioFileS3Bucket}"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
  CustomResourceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Ref CustomResourceLambdaFunctionName
      Description: Custom resource lambda used for setting up triggers to an existing S3 bucket
      Role: !GetAtt StepFuncionTriggerLambdaInvokeRole.Arn
      Code:
        ZipFile: |

          from __future__ import print_function
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          print('Loading function')
          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      Bucket=event['ResourceProperties']['Bucket']
                      delete_notification(Bucket)
                      print("Sending response to custom resource after Delete")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print("Request Type:",event['RequestType'])
                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']
                      add_notification(LambdaArn, Bucket)
                      responseData={'Bucket':Bucket}
                      print("Sending response to custom resource")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILURE'
                  responseData = {'Failure': 'Something bad happened.'}
              cfnresponse.send(event, context, responseStatus, responseData)

          def add_notification(LambdaArn, Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                NotificationConfiguration={
                  'LambdaFunctionConfigurations': [
                    {
                        'LambdaFunctionArn': LambdaArn,
                        'Events': [
                            's3:ObjectCreated:*'
                        ]
                    }
                  ]
                }
              )
              print("Put request completed....")
            
          def delete_notification(Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                  NotificationConfiguration={}
              )
              print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50
  LambdaTrigger:
    Type: "Custom::LambdaTrigger"
    DependsOn: StepFuncionTriggerLambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt StepFunctionTriggerLambda.Arn
      Bucket: !Ref AudioFileS3Bucket
