AWSTemplateFormatVersion: "2010-09-09"

Description: "Octank demo - Comprehension stack"

Parameters:
  StepFnTriggerLambdaName:
    Type: String
    Default: octank-step-fn-trigger
  StartTranscriptionLambdaName:
    Type: String
    Default: octank-transcribe-trigger
  CheckTranscriptionStatusLambdaName:
    Type: String
    Default: octank-check-transcribe-status
  GetTranscriptionOutputLambdaName:
    Type: String
    Default: octank-get-transcribe-output
  ComprehendTriggerAndStoreLambdaName:
    Type: String
    Default: octank-comprehend-trigger-and-store
  DynamoDBTableName:
    Type: String
    Default: octank-customer-table
Resources:
  StepFunctionTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';

          const aws = require('aws-sdk');
          var stepfunctions = new aws.StepFunctions();
          const s3 = new aws.S3({ apiVersion: '2006-03-01' });

          exports.handler = (event, context, callback) => {
            const bucket = event.Records[0].s3.bucket.name;
            const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
            const params = { Bucket: bucket, Key: key };
            s3.getObject(params, (err, data) => {
              if (err) {
                console.log(err);
                const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;
                console.log(message);
                callback(message);
              } else {
                var job_name = key.replace("/", "-");
                var stepparams = {
                  "stateMachineArn": process.env.STEP_FUNCTIONS_ARN,
                  "input": "{\"s3URL\": \"https://s3.amazonaws.com/" + bucket + "/" + key + "\",\"JOB_NAME\": \"" + job_name + "\"}"
                };
                stepfunctions.startExecution(stepparams, function(err, data) {
                  if (err) console.log(err, err.stack); // an error occurred
                  else console.log(data); // successful response
                });
                callback(null, data.ContentType);
              }
            });
          };
      Handler: index.handler
      FunctionName: !Ref StepFnTriggerLambdaName
      Description: NEW - Lambda invoked on changes in DynamoDB table
      Role:
        Fn::GetAtt: [StepFunctionTriggerLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          STEP_FUNCTIONS_ARN: "asdfg"
  StepFunctionTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StepFunctionTriggerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  StartTranscriptionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';

          const AWS = require('aws-sdk');
          const transcribeservice = new AWS.TranscribeService();
          exports.handler = (event, context, callback) => {
            var parts = event.JOB_NAME.split("/");
            var params = {
              LanguageCode: 'en-US',
              Media: { /* required */
                MediaFileUri: event.s3URL + ""
              },
              MediaFormat: 'wav',
              TranscriptionJobName: parts[parts.length - 1]
            };
            transcribeservice.startTranscriptionJob(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     {
              console.log(data);           // successful response
              event.wait_time = 10;
              event.JOB_NAME = data.TranscriptionJob.TranscriptionJobName;
              callback(null, event);
              }
            });
          };
      Handler: index.handler
      FunctionName: !Ref StartTranscriptionLambdaName
      Description: NEW - Trigger transcription job for call recordings
      Role:
        Fn::GetAtt: [StartTranscriptionLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
  StartTranscriptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StartTranscriptionLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  CheckTranscriptionStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';
          var AWS = require('aws-sdk');
          var transcribeservice = new AWS.TranscribeService();

          exports.handler = (event, context, callback) => {
              var params = {
                TranscriptionJobName: event.JOB_NAME /* required */
              };
              transcribeservice.getTranscriptionJob(params, function(err, data) {
                if (err) console.log(err, err.stack); // an error occurred
                else     console.log(data);           // successful response
                event.STATUS = data.TranscriptionJob.TranscriptionJobStatus;
                event.Transcript =data.TranscriptionJob.Transcript;
                callback(null,event);
              });
          };
      Handler: index.handler
      FunctionName: !Ref CheckTranscriptionStatusLambdaName
      Description: NEW - Check status of transcription job
      Role:
        Fn::GetAtt: [CheckTranscriptionStatusLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
  CheckTranscriptionStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CheckTranscriptionStatusLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  GetTranscriptionOutputLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';
          var AWS = require('aws-sdk');
          var transcribeservice = new AWS.TranscribeService();

          exports.handler = (event, context, callback) => {

              var params = {
                TranscriptionJobName: event.JOB_NAME /* required */
              };
              transcribeservice.getTranscriptionJob(params, function(err, data) {
                if (err) console.log(err, err.stack); // an error occurred
                else     console.log(data);           // successful response
                event.STATUS = data.TranscriptionJob.TranscriptionJobStatus;
                event.TranscriptFileUri =data.TranscriptionJob.Transcript.TranscriptFileUri;
                callback(null,event);
              });
          };
      Handler: index.handler
      FunctionName: !Ref GetTranscriptionOutputLambdaName
      Description: NEW - Get transcription output
      Role:
        Fn::GetAtt: [GetTranscriptionOutputLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
  GetTranscriptionOutputLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GetTranscriptionOutputLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  ComprehendTriggerAndStoreLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          'use strict';
          const https = require('https');
          const AWS = require('aws-sdk');
          const comprehend = new AWS.Comprehend({ apiVersion: '2017-11-27' });
          const dynamoDb = new AWS.DynamoDB.DocumentClient();

          exports.handler = (event, context, callback) => {
            var requestUrl = event.TranscriptFileUri;
            console.log(`Transcript file will be fetched from ${requestUrl}`);
            console.log(`Received event in lambda ${JSON.stringify(event)}`);
            https.get(requestUrl, (res) => {
              var chunks = [];
              res.on("data", function(chunk) {
                chunks.push(chunk);
              });
              res.on("end", function() {
                var body = Buffer.concat(chunks);
                var results = JSON.parse(body);
                var transcript = results.results.transcripts[0].transcript;
                console.log(`Transcribed text "${transcript}"`);
                var params = {
                  LanguageCode: "en",
                  Text: transcript + ""
                };
                Promise.all([
                    comprehend.detectEntities(params).promise(),
                    comprehend.detectSentiment(params).promise()
                  ]).then(([entities, sentiments]) => {
                    console.log(`Detected entities: ${JSON.stringify(entities)}`);
                    console.log(`Detected sentiments: ${JSON.stringify(sentiments)}`);
                    return storeToDynamoDB('robinjer@amazon.com', entities, sentiments);
                  })
                  .then(() => {
                    callback(null, {});
                  })
                  .catch(err => {
                    console.log(err, err.stack);
                  });
              });

            }).on('error', (e) => {
              console.error(e);
            });
          };

          const storeToDynamoDB = (customerId, entities, sentiments) => {
            const timestamp = new Date().getTime();
            const params = {
              TableName: process.env.DYNAMODB_TABLE,
              Item: {
                customerId: customerId,
                entities: entities,
                sentiments: sentiments,
                recommendations: [],
                createdAt: timestamp,
                updatedAt: timestamp,
              }
            }
            return dynamoDb.put(params).promise()
              .then(data => {
                console.log(`Stored entities and sentiments in DynamoDB for customer: ${customerId}`);
                return Promise.resolve(data);
              })
              .catch(err => {
                console.error(`Failed to store entities and sentiments in DynamoDB for customer: ${customerId}, error : ${JSON.stringify(err)}`);
                return Promise.reject(err);
              })
          };
      Handler: index.handler
      FunctionName: !Ref ComprehendTriggerAndStoreLambdaName
      Description: NEW - Start comprehend job when transcription is complete and store to Dynamo DB
      Role:
        Fn::GetAtt: [ComprehendTriggerAndStoreLambdaRole, Arn]
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
  ComprehendTriggerAndStoreLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ComprehendTriggerAndStoreLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
